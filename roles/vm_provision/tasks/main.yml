---
- name: Create VPC
  amazon.aws.ec2_vpc_net:
    name: onehtmlpage-vpc
    cidr_block: 10.0.0.0/16
    region: "{{ aws_region }}"
    dns_hostnames: true
    dns_support: true
    state: present
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
  register: vpc

- name: Create subnet
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: 10.0.1.0/24
    region: "{{ aws_region }}"
    state: present
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
  register: subnet

- name: Create security group
  amazon.aws.ec2_security_group:
    name: onehtmlpage-sg
    description: Allow SSH, HTTP, HTTPS
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        ports:
          - 22
          - 80
          - 443
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
    state: present
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
  register: sg

- name: Create Internet Gateway
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    state: present
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
  register: igw

- name: Create Route Table with route to Internet Gateway and associate with subnet
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    state: present
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
    subnets:
      - "{{ subnet.subnet.id }}"
  register: route_table

- name: Create SSH key pair (skip if exists)
  amazon.aws.ec2_key:
    name: onehtmlpage-key
    region: "{{ aws_region }}"
    state: present
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
  register: keypair


- name: Launch EC2 instances
  amazon.aws.ec2_instance:
    name: "{{ item.name }}"
    key_name: onehtmlpage-key
    region: "{{ aws_region }}"
    instance_type: t2.micro
    image_id: "{{ ami_id }}"
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    security_group: "{{ sg.group_id }}"
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    network_interfaces:
      - device_index: 0
        assign_public_ip: true
    wait: true
    tags:
      Name: "{{ item.name }}"
      Role: "webserver"
  loop: "{{ vm_hosts }}"
  register: ec2_instances


- name: Write temporary SSH key
  ansible.builtin.copy:
    dest: "/tmp/onehtmlpage_key.pem"
    content: "{{ keypair.key.private_key }}"
    mode: '0400'
  delegate_to: localhost
  no_log: false
  when: keypair.key.private_key is defined


- name: Wait until new EC2 instances are SSH-ready
  ansible.builtin.wait_for_connection:
    delay: 20
    timeout: 300
  loop: "{{ ec2_instances.results | map(attribute='instances') | list | flatten }}"
  loop_control:
    loop_var: ec2
  vars:
    ansible_host: "{{ ec2.public_ip_address }}"
    ansible_user: ec2-user
    ansible_ssh_private_key_file: "/tmp/onehtmlpage_key.pem"


- name: Add EC2 instances to webservers group dynamically
  ansible.builtin.add_host:
    name: "{{ item.tags.Name }}"
    groups: webservers
    ansible_host: "{{ item.public_ip_address }}"
    ansible_ssh_private_key_file: "/tmp/onehtmlpage_key.pem"
    ansible_user: ec2-user
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
  loop: "{{ ec2_instances.results | map(attribute='instances') | list | flatten }}"


- name: Generate EC2 inventory file
  ansible.builtin.template:
    src: ec2_inventory.ini.j2
    dest: "{{ my_inventory_dir }}/ec2_inventory.ini"
    mode: '0644'
